#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

//num[]의 자릿수를 올림을 처리한다.
void normalize(vector<int> &num)
{
	num.push_back(0); //vector 삽입순서 착각해서 삽질함 ㅋㅋㅋ 자릿수 올라가는 자리를 미리 포함시켜줘야하니까 삽입하는거임

	//자릿수 올림을 처리한다.
	int size = num.size();
	for (int i = 0; i < size - 1; i++)
	{
		if (num[i] < 0) // 계산 결과시 음수일 경우
		{
			int borrow = (abs(num[i]) + 9) / 10;
			num[i + 1] -= borrow;
			num[i] += borrow * 10;
		}
		else
		{
			num[i + 1] += num[i] / 10;
			num[i] %= 10;
		}
	}
	//앞에 남은 0을 제거한다.
	while (num.size() > 1 && num.back() == 0)
		num.pop_back();
}

//두 긴 자연수의 곱을 반환한다.
//각 배열에는 각 수의 자릿수가 1의 자리에서부터 시작해 저장되어 있다.
//예: multiply({3,2,1},{6,5,4}) = 123* 456 = 56088 = {8,8,0,6,5};
vector<int> multiply(const vector<int> &a, const vector<int> & b)
{
	vector<int> c(a.size() + b.size() + 1, 0);

	int A_tmpSize = a.size();
	int B_tmpSize = b.size(); 
	for (int i = 0; i < A_tmpSize; i++)
	for (int j = 0; j < B_tmpSize; j++)
		c[i + j] += a[i] * b[j];

	normalize(c);
	return c;
}

//a+b=b*(10^k)
void addTo(vector<int>& a, const vector<int>& b, int k)
{
	if (a.size() < b.size() + k)
		a.resize(b.size() + k);

	a.push_back(0); //덧셈시 자릿수 증가를 위해 미리 공간 확보를 위한 삽입

	for (int i = a.size(); i < a.size(); i++)
		a[i] = 0;

	for (int i = 0; i < b.size(); i++)
		a[i + k] += b[i];

	normalize(a);
}

void subFrom(vector<int> &a, const vector<int> &b)
{
	for (int i = 0; i < b.size(); i++)
		a[i] -= b[i];
	normalize(a);
}
//a+=b*(10^k)를 구현한다.
vector<int> karatsuba(const vector<int>& a, const vector<int> &b)
{
	int an = a.size(), bn = b.size();
	//a가 b보다 짧을 경우 둘을 바꾼다.
	if (an < bn) return karatsuba(b, a);
	//기저 사례:a나 b가 비어 있는 경우
	if (an == 0 || bn == 0) return vector<int>();
	//기저 사례: a가 비교적 짧은 경우,O(n^2) 곱셈으로 변경한다.(성능을 위함)
	if (an <= 50)
		return multiply(a, b);
	int half = an / 2;
	
	vector<int> a0(a.begin(), a.begin() + half);
	vector<int> a1(a.begin() + half, a.end());
	vector<int> b0(b.begin(), b.begin() + min<int>(b.size(), half));
	vector<int> b1(b.begin() + min<int>(b.size(), half), b.end());

	//z2 = a1*b1
	vector<int> z2 = karatsuba(a1, b1);
	//z0 = a0 * b0
	vector<int> z0 = karatsuba(a0, b0);
	//z1 = ((a0+a1) * (b0+b1)) -z0-z2
	addTo(a0, a1, 0);
	addTo(b0, b1, 0);
	vector<int> z1 = karatsuba(a0, b0);
	subFrom(z1, z0);
	subFrom(z1, z2);

	//ret = z0 + z1*10^half + z2*10^(half*2)
	vector<int> ret(z2.size() + half*2,0);//
	addTo(ret, z0, 0);
	addTo(ret, z1, half);
	addTo(ret, z2, half + half);
	return ret;
}

int main(int argc, char*argv[])
{
	cout << "계산을 원하는 숫자 뒷자리부터 입력하세요" << endl;

	vector<int> a, b;
	for (int i = 0; i < 3; i++)
	{	
		int n;
		cin >> n;
		a.push_back(n);
	}
	for (int i = 0; i < 3; i++)
	{
		int n;
		cin >> n;
		b.push_back(n);
	}

	vector<int> c = karatsuba(a, b);

	cout << "계산결과" << endl;
	for (int i = 0; i < c.size(); i++)
		cout << c[i]<<" ";
	cout << endl;

	return 0;
}
