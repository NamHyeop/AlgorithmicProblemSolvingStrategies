#include<iostream>
#include<algorithm>
#include<cstring>

using namespace std;
//입력이 32비트 부호 있느 정수의 모든 값을 가질 수 있으므로
//인위적인 최소치는 64비트여야 한다.
const long long NEGINF = numeric_limits<long long>::min();
int n;
int m;
int A[100];
int B[100];
int cache[101][101];

//min(A[indexA],B[indexB]),max(A[indexA],B[indexB]로 시작하는
//합친 증가 부분 수열의 최대 길이를 반환한다.
//단 indexA == indexB == -1혹은 A[index] != B[indexB]라고 가정한다.(중복 안한다는 말 ex:)1234,342 = 1234
int jlis(int indexA, int indexB)
{
	//메모이제이션
	int &ret = cache[indexA+1][indexB+1];
	if (ret != -1)
		return ret;
	//A[indexA],B[indexB]가 이미 존재하므로 2개는 항상 있다 == 두 개 합치니까 최소 1개씩은 있으니 2개라는 의미
	ret = 2;
	long long a = (indexA == -1 ? NEGINF : A[indexA]);
	long long b = (indexB == -1 ? NEGINF : B[indexB]);
	long long maxElement = max(a, b);
	//다음 원소를 찾는다.
	for (int nextA = indexA+1; nextA < n; nextA++)
	if (maxElement < A[nextA])
		ret = max(ret, jlis(nextA, indexB) + 1);
	for (int nextB = indexB + 1; nextB < m; nextB++)
	if (maxElement < B[nextB])
		ret = max(ret, jlis(indexA, nextB) + 1);

	return ret;
}

int main(int argc, char * argv[])
{
	int Testcase;
	cin >> Testcase;

	if (Testcase < 0 || Testcase >50)
		return 0;

	for (int i = 0; i < Testcase; i++)
	{
		cin >> n;
		cin >> m;
		memset(cache, -1, sizeof(cache));
		
		for (int i = 0; i < n; i++)
			cin >> A[i];
		for (int j = 0; j < m; j++)
			cin >> B[j];
		
		cout << jlis(-1, -1) -2 << endl; //-1이 두 개 추가 되었으므로 결과에서 2개 빼준다.
	}
	return 0;
}
